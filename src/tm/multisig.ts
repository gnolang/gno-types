// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: tm/multisig.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../google/protobuf/any.js";

/** messages */
export interface PubKeyMultisig {
  k: bigint;
  pubKeys: Any[];
}

export interface Multisignature {
  bitArray?: CompactBitArray | undefined;
  sigs: Uint8Array[];
}

export interface CompactBitArray {
  /** The number of extra bits in elems. */
  extraBitsStored: number;
  elems: Uint8Array;
}

function createBasePubKeyMultisig(): PubKeyMultisig {
  return { k: 0n, pubKeys: [] };
}

export const PubKeyMultisig: MessageFns<PubKeyMultisig> = {
  encode(message: PubKeyMultisig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.k !== 0n) {
      if (BigInt.asUintN(64, message.k) !== message.k) {
        throw new globalThis.Error("value provided for field message.k of type uint64 too large");
      }
      writer.uint32(8).uint64(message.k);
    }
    for (const v of message.pubKeys) {
      Any.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PubKeyMultisig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePubKeyMultisig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.k = reader.uint64() as bigint;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pubKeys.push(Any.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PubKeyMultisig {
    return {
      k: isSet(object.threshold) ? BigInt(object.threshold) : 0n,
      pubKeys: globalThis.Array.isArray(object?.pubkeys) ? object.pubkeys.map((e: any) => Any.fromJSON(e)) : [],
    };
  },

  toJSON(message: PubKeyMultisig): unknown {
    const obj: any = {};
    if (message.k !== undefined) {
      obj.threshold = message.k.toString();
    }
    if (message.pubKeys?.length) {
      obj.pubkeys = message.pubKeys.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PubKeyMultisig>, I>>(base?: I): PubKeyMultisig {
    return PubKeyMultisig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PubKeyMultisig>, I>>(object: I): PubKeyMultisig {
    const message = createBasePubKeyMultisig();
    message.k = object.k ?? 0n;
    message.pubKeys = object.pubKeys?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMultisignature(): Multisignature {
  return { bitArray: undefined, sigs: [] };
}

export const Multisignature: MessageFns<Multisignature> = {
  encode(message: Multisignature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bitArray !== undefined) {
      CompactBitArray.encode(message.bitArray, writer.uint32(10).fork()).join();
    }
    for (const v of message.sigs) {
      writer.uint32(18).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Multisignature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultisignature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bitArray = CompactBitArray.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sigs.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Multisignature {
    return {
      bitArray: isSet(object.bitArray) ? CompactBitArray.fromJSON(object.bitArray) : undefined,
      sigs: globalThis.Array.isArray(object?.sigs) ? object.sigs.map((e: any) => bytesFromBase64(e)) : [],
    };
  },

  toJSON(message: Multisignature): unknown {
    const obj: any = {};
    if (message.bitArray !== undefined) {
      obj.bitArray = CompactBitArray.toJSON(message.bitArray);
    }
    if (message.sigs?.length) {
      obj.sigs = message.sigs.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Multisignature>, I>>(base?: I): Multisignature {
    return Multisignature.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Multisignature>, I>>(object: I): Multisignature {
    const message = createBaseMultisignature();
    message.bitArray = (object.bitArray !== undefined && object.bitArray !== null)
      ? CompactBitArray.fromPartial(object.bitArray)
      : undefined;
    message.sigs = object.sigs?.map((e) => e) || [];
    return message;
  },
};

function createBaseCompactBitArray(): CompactBitArray {
  return { extraBitsStored: 0, elems: new Uint8Array(0) };
}

export const CompactBitArray: MessageFns<CompactBitArray> = {
  encode(message: CompactBitArray, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.extraBitsStored !== 0) {
      writer.uint32(8).uint32(message.extraBitsStored);
    }
    if (message.elems.length !== 0) {
      writer.uint32(18).bytes(message.elems);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompactBitArray {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompactBitArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.extraBitsStored = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.elems = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompactBitArray {
    return {
      extraBitsStored: isSet(object.extra_bits) ? globalThis.Number(object.extra_bits) : 0,
      elems: isSet(object.bits) ? bytesFromBase64(object.bits) : new Uint8Array(0),
    };
  },

  toJSON(message: CompactBitArray): unknown {
    const obj: any = {};
    if (message.extraBitsStored !== undefined) {
      obj.extra_bits = Math.round(message.extraBitsStored);
    }
    if (message.elems !== undefined) {
      obj.bits = base64FromBytes(message.elems);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompactBitArray>, I>>(base?: I): CompactBitArray {
    return CompactBitArray.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompactBitArray>, I>>(object: I): CompactBitArray {
    const message = createBaseCompactBitArray();
    message.extraBitsStored = object.extraBitsStored ?? 0;
    message.elems = object.elems ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
